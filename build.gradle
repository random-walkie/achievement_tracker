import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '7.0.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(19)
	}
}

repositories {
	mavenCentral()
}

// This configuration enables us to define dependencies that are specific only to our local environment.
configurations {
	localH2Implementation.extendsFrom implementation
	localH2RuntimeOnly.extendsFrom runtimeOnly
}

sourceSets {
	localH2 {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

// In localH2 source set, the PostgreSQL driver included.
// To remove that dependency, use this block of code:
configurations.localH2Implementation {
	exclude group: 'org.postgresql', module: 'postgresql'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	testCompileOnly 'org.projectlombok:lombok:1.18.36'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

	localH2RuntimeOnly 'com.h2database:h2'
}

spotless {

	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'achievement_tracker/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration
		importOrder()
		removeUnusedImports()
		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()
		// formatter
		googleJavaFormat('1.10.0').aosp().reflowLongStrings()
		formatAnnotations()
		licenseHeaderFile 'spotless.license.java'
	}
}

tasks.register('localH2', BootRun) {
	mainClass = "com.example.achievement_tracker.AchievementTrackerApplication"
	classpath = sourceSets.localH2.runtimeClasspath
}

tasks.named('test') {
	useJUnitPlatform()
}
